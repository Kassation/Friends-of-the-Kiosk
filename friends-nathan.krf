;;; (achieve :receiver interaction-manager :content (startUserProfiles)) to start
;;; (achieve :receiver interaction-manager :content (endUserProfiles)) to end
(in-microtheory Interaction-Manager-KioskMt)

(isa UserProfilesMt Microtheory)

(isa userProfilesActive Predicate)
(arity userProfilesActive 0)
(comment userProfilesActive 
  "(userProfilesActive) holds when the UserProfiles is being used to
   implement the Getting-to-know-people.")

;;;-----START-----;;;
(isa startUserProfiles ComplexActionPredicate)
(arity startUserProfiles 0)
(comment startUserProfiles
  "(startUserProfiles) tweaks the Interaction Manager to use semantic 
   interpretation methods that implement the Getting-to-know-people.")

(preconditionForMethod
 (and (newReifiedUtterance ?system-utterance)
      (currentUser ?user)
      (formattedContentString
        "Hey hey hey! What food or CS topics do you like?" (TheList ?user) ?utterance-string))
 (methodForAction
  (startUserProfiles)
  (actionSequence
   (TheList
    (doRecordMembers
     (TheSet
      (ist-Information Interaction-Manager-KioskMt
        (<== (preferInContext
              (answerQuestionViaEEs ?dcase)
              ?seq1 ?seq2)
             (containsPattern (checkUPUnderstanding ?dcase)
                              ?seq1)))
      ;;; make new Mt for user
      (isa (SocialModelMtFn ?user) Microtheory)
      (userProfilesActive)
      (genlMt Interaction-Manager-KioskMt UserProfilesMt)))
    (doAnnounce "Starting User Profiles...")
    (doSayUtterance ?system-utterance ?utterance-string)))))

;;;-----END-----;;;
(isa endUserProfiles ComplexActionPredicate)
(arity endUserProfiles 0)
(comment endUserProfiles
  "(endUserProfiles) tweaks the Interaction Manager to use semantic 
   interpretation methods that implement the Getting-to-know-people.")

(preconditionForMethod
 (and (newReifiedUtterance ?system-utterance)
      (currentUser ?user)
      (formattedContentString
        "See ya!" (TheList ?user) ?utterance-string))
 (methodForAction
  (endUserProfiles)
  (actionSequence
   (TheList
    (doForgetMembers
     (TheSet
      (ist-Information Interaction-Manager-KioskMt
        (<== (preferInContext
              (answerQuestionViaEEs ?dcase)
              ?seq1 ?seq2)
             (containsPattern (checkUPUnderstanding ?dcase)
                              ?seq1)))
      (userProfilesActive)
      (genlMt Interaction-Manager-KioskMt UserProfilesMt)))
    (doAnnounce "Shutting down User Profiles...")
    (doSayUtterance ?system-utterance ?utterance-string)))))


(isa checkUPUnderstanding ComplexActionPredicate)
(arity checkUPUnderstanding 1)
(arg1Isa checkUPUnderstanding Microtheory)
;;;(arg2Isa checkUPUnderstanding CycLTerm)
;;;(arg3Isa checkUPUnderstanding Microtheory)
(comment checkUPUnderstanding
  "(checkUPUnderstanding ?dcase) does the semantic analysis
   needed to recognize dialogue acts and domain semantics for FotK.")

;;; Dispatch to checkUPUnderstanding if the game is active.
(preconditionForMethod 
    (userProfilesActive)
 (methodForAction
  (answerQuestionViaEEs ?dcase)
  (actionSequence
   (TheList
    (doAnnounce "Using FotK methods.")
    (checkUPUnderstanding ?dcase)))))

(preconditionForMethod 
 (and (userProfilesActive)
      (outsourcedOnly (currentSentenceId ?sid))
      (ist-Information ?dcase
        (sentenceText ?sid ?user-utterance))
      (generateMostAppropriateQuery ?dcase ?response)
      (ist-Information ?dcase
        (sentenceInDiscourse ?sid ?s-index ?wordslist))
      (evaluate ?next-index (PlusFn 1 ?s-index))
      (currentUser ?user))
 (methodForAction 
  (checkUPUnderstanding ?dcase)
  (actionSequence
   (TheList 
    (doAnnounce "Running FotK narrative functions.")
    (doEADiscourseInterpretation
     UserProfiles-NFMt ?s-index ?next-index)
     ))))


(preconditionForMethod
  (and (currentUser ?user)
       ;;; how do i get info from my NF
  )
  (methodForAction
    (gatherInfo)
    (actionSequence
      (TheList
        (doRecord (ist-information (SocialModelMtFn ?user)
                    (CSInterest ?user ?preference))))))
)

;;;-----NF-----
(in-microtheory UserProfiles-NFMt)

(queryForInterpretation 0
                        (narrativeFunction (PresentationEventFn :REPLACE-SID ?event-id)
                                           ?preference
                                           UserIntroduction))

;;; OfferingACulturalProduct
(isa UserIntroduction Collection)
(genls UserIntroduction CommunicationAct-Single)
(comment UserIntroduction
  "UserIntroduction indicates that the sentence is a person introducing 
  themself to the Kiosk.")

(isa introducesPreference Predicate)
(arity introducesPreference 2)
(arg1Isa introducesPreference IBTGeneration)
(arg2Isa introducesPreference Thing)
(comment introducesPreference
  "(introducesPreference ?pef ?po) indicates that there is an introduction
 event ?pef which constitutes stating a preference ?po.")

;;; NF 

(<== (narrativeFunction (PresentationEventFn ?sid ?event-id)
                        ?preference UserIntroduction)
     (introducesPreference ?sid ?preference)
     ;; Introduce constant for the event ID
     (individualSatisfyingConditions 
      ?event-id IBTGeneration
      (TheSet (groundExpression ?preference))))

;;; introducesCulturalProductOffer

(<== (introducesPreference ?sid
                           ?prefernece)
     (ist-Information (DrsCaseFn ?sid)
       (discourseCaseForDrs ?dcase ?sid))
     (ist-Information ?dcase (isaPossibleCaseForSentence ?sdrs-id ?sid))
     (sentenceIndicatesPreference ?sdrs-id ?pref-verb)
     (sentenceLikesPreference ?sdrs-id ?pref-verb ?preference))

;;; sentenceIndicatesOffer

(isa sentenceIndicatesPreference Predicate)
(arity sentenceIndicatesPreference 2)
(arg1Isa sentenceIndicatesPreference CycLTerm)
(arg2Isa sentenceIndicatesPreference Thing)
(comment sentenceIndicatesPreference 
  "(sentenceIndicatesPreference ?sdrs-id ?pref-verb) indicates that the sentences
 whose DRS is ?sdrs-id has a verb suggesting a preference is being made, ?pref-verb")
     
(<== (sentenceIndicatesPreference ?sdrs-id ?pref-verb)
     (ist-Information (DrsCaseFn ?sdrs-id)
       (isa ?pref-verb (ExperiencingEmotionFn Like))))

;;; sentenceOffersProduct

(isa sentenceLikesPreference Predicate)
(arity sentenceLikesPreference 3)
(arg1Isa sentenceLikesPreference CycLTerm)
(arg2Isa sentenceLikesPreference Thing)
(arg3Isa sentenceLikesPreference Thing)
(comment sentenceLikesPreference
  "(sentenceLikesPreference ?sdrs-id ?pref-verb ?preference) indicates that
 in sentence DRS ?sdrs-id, with verb indicating a preference ?pref-verb, the
 preferred item is ?preference.")

(<== (sentenceLikesPreference ?sdrs-id ?pref-verb ?preference)
     (ist-Information (DrsCaseFn ?sdrs-id) 
       (fe_event ?pref-verb ?preference))
     (reasonablePreference ?preference))

(<== (sentenceLikesPreference ?sdrs-id ?pref-verb ?preference)
     (ist-Information (DrsCaseFn ?sdrs-id) 
       (objectGiven ?pref-verb ?preference))
     (reasonablePreference ?preference))

(<== (sentenceLikesPreference ?sdrs-id ?pref-verb ?preference)
     (ist-Information (DrsCaseFn ?sdrs-id) 
       (situationTopic ?pref-verb ?preference))
     (reasonablePreference ?preference))

;;; reasonableConceptualWorkType

(isa reasonablePreference Predicate)
(arity reasonablePreference 1)
(arg1Isa reasonablePreference Thing)
(comment reasonablePreference
  "(reasonablePreference ?thing) holds when ?thing is the sort of 
  preference that can be saved by FotK.")

(<== (reasonablePreference ?preference)
     ;; Food
     (kbOnly 
      (useTransitiveInference
       (ist-Information UniversalVocabularyMt
         (isa ?preference DefaultDisjointEdibleStuffType))))
)

(<== (reasonablePreference ?product)
     ;; CS Topic
     (kbOnly 
      (useTransitiveInference
       (ist-Information UniversalVocabularyMt 
         (isa ?preference FieldOfStudy))))
)


;;; Tell the abduction method something about your preferences
;;; Some weights needed because of the abductive policy being
;;; abductive-score-via-symbol-weights, but
;;; by using an alternative to doEADiscourseInterpretation,
;;; you can explore other abductive policies.

(abductiveNLCollectionScore GivingSomething 10)
(abductiveNLCollectionScore DesiringThat 10)
(abductiveNLCollectionScore Like 10)
(abductiveNLPredicateScore fe_event 10)
(abductiveNLPredicateScore objectGiven 10)
(abductiveNLPredicateScore situationTopic 10)