(in-microtheory Interaction-Manager-KioskMt)
(isa UserProfilesMt Microtheory)

;;; (achieve :receiver interaction-manager :content (startUserProfiles)) to start
;;; (achieve :receiver interaction-manager :content (endUserProfiles)) to end

(isa userProfilesActive Predicate)
(arity userProfilesActive 0)
(comment userProfilesActive 
  "(userProfilesActive) holds when the UserProfiles is being used to
   implement the Getting-to-know-people.")

;;;-----START-----
(isa startUserProfiles ComplexActionPredicate)
(arity startUserProfiles 0)
(comment startUserProfiles
  "(startUserProfiles) tweaks the Interaction Manager to use semantic 
   interpretation methods that implement the Getting-to-know-people.")

(preconditionForMethod 
  (and (newReifiedUtterance ?system-utterance)
      (currentUser ?user)
      (formattedContentString
       "Hello, ~a. Would you please tell me which department are you in?" (TheList ?user) ?utterance-string))
  (methodForAction
    (startUserProfiles)
    (actionSequence
      (TheList 
        (doRecordMembers
          (TheSet
            (ist-Information Interaction-Manager-KioskMt
              (<== (preferInContext (answerQuestionViaEEs ?dcase) ?seq1 ?seq2)
                    (containsPattern (doEADiscourseInterpretation ?mt ?s-id ?n-id) ?seq1)))
            (ist-Information Interaction-Manager-KioskMt
              (<== (preferInContext (answerQuestionViaEEs ?dcase) ?seq1 ?seq2)
                    (someArgumentHasPredicate ?seq1 userProfilesActive)))
      ;;; make new Mt for current user
            (isa (SocialModelMtFn ?user) Microtheory)
            (genlMt KioskFriendsDataMt (SocialModelMtFn ?user))
            (userProfilesActive)
            (genlMt Interaction-Manager-KioskMt UserProfilesMt)))
        (doAnnounce "Starting UserProfiles." nil)
        (doSayUtterance ?system-utterance ?utterance-string)
        (doEADiscourseInterpretation UserProfilesMt ?s-index ?next-index)
        (doAgentPlan (getUserMajor))
        ))))



;;;-----END-----
(isa endUserProfiles ComplexActionPredicate)
(arity endUserProfiles 0)
(comment endUserProfiles
  "(endUserProfiles) tweaks the Interaction Manager to use semantic 
   interpretation methods that implement the Getting-to-know-people.")

(preconditionForMethod 
 (true)
 (methodForAction
  (endUserProfiles)
  (actionSequence
   (TheList 
    (doForgetMembers
     (TheSet
      (ist-Information Interaction-Manager-KioskMt
        (<== (preferInContext (answerQuestionViaEEs ?dcase)
              ?seq1 ?seq2)
             (containsPattern (doEADiscourseInterpretation ?mt ?s-id ?n-id) ?seq1)))
      (ist-Information Interaction-Manager-KioskMt
        (<== (preferInContext (answerQuestionViaEEs ?dcase) ?seq1 ?seq2)
             (someArgumentHasPredicate ?seq1 userProfilesActive)))
      (userProfilesActive)
      (genlMt Interaction-Manager-KioskMt UserProfilesMt)))
    (doAnnounce "Ending UserProfiles. " nil)))))


;;;-----INTERPRET-----
(preconditionForMethod
 (and (newReifiedUtterance ?system-utterance)
      (currentAgents ?agents)
      (not (elementOf psi ?agents))
      (outsourcedOnly (currentSentenceId ?sid))
      (ist-Information ?dcase
        (sentenceText ?sid ?user-utterance))
      (different ?user-utterance "Exit.")
      (generateMostAppropriateQuery ?dcase ?response)
      (ist-Information ?dcase
        (sentenceInDiscourse ?sid ?s-index ?wordslist))
      (evaluate ?next-index (PlusFn 1 ?s-index)))
 (methodForAction 
  (answerQuestionViaEEs ?dcase)
  (actionSequence
   (TheList 
    (doSayUtterance ?system-utterance "interpreting...please wait")
    (doAnnounce "current ?sid: ~a~%" (?sid))
    (doEADiscourseInterpretation UserProfilesMt ?s-index ?next-index)
    (doAgentPlan
     (getUserMajor ?sid ?dcase))))))


;; --------------Major------
(isa getUserMajor ComplexActionPredicate)
(arity getUserMajor 2)

(preconditionForMethod
 (and (newReifiedUtterance ?system-utterance)
      (userProfilesActive)
      (outsourcedOnly (currentSentenceId ?sid))
      (currentUser ?user)
      (generateMostAppropriateQuery ?dcase ?response)
      (ist-Information ?dcase
        (askForMajor ?sid ?major))
      (formattedContentString
       "OK. Are you an undergraduate or graduate student, ~a?" (TheList ?user) ?utterance-string))
 (methodForAction 
  (getUserMajor ?sid ?dcase)
  (actionSequence
   (TheList 
    (doSayUtterance ?system-utterance ?utterance-string)
    (doAnnounce "said major, asking grade ERROR" (?sid))
    (doRecordMembers
      (ist-Information (SocialModelMtFn ?user) (studentMajor ?user ?major)))
    (doRecord 
      (ist-Information (SocialModelMtFn ?user) (studentMajor ?user ?major)))
    (doAgentPlan (getUserGrade))
     ))))


;;--------Exit
(preconditionForMethod
 (and (userProfilesActive)
      (outsourcedOnly (currentSentenceId ?sid))
      (ist-Information ?dcase
        (sentenceText ?sid ?string))
      (equals ?string "Exit.")
      (newReifiedUtterance ?system-utterance)
      (currentUser ?user)
      (formattedContentString
       "Thanks for using. Goodbye, ~a. " (TheList ?user) ?utterance-string))
 (methodForAction
  (answerQuestionViaEEs ?dcase)
  (actionSequence
   (TheList
    (doRecord (userProfilesActive))
    (doAgentPlan (endUserProfiles))
    (doSayUtterance ?system-utterance ?utterance-string)))))



;;;;----------------------------Narritive Functions
(in-microtheory UserProfilesMt)

(queryForInterpretation 0
                        (narrativeFunction (PresentationEventFn :REPLACE-SID ?event-id)
                                           ?suggested-field
                                           UserIntroduction))
(isa UserIntroduction Collection)
(genls UserIntroduction Informing)
(comment UserIntroduction
  "UserIntroduction indicates that the sentence is a person introducing themself to the Kiosk, including major, grade, food/drink interest, and CS interest.")

(isa askForMajor Predicate)
(arity askForMajor 2)
(arg1Isa askForMajor IBTGeneration)
(arg2Isa askForMajor Thing)

(<== (narrativeFunction (PresentationEventFn ?sid ?event-id)
                        ?major UserIntroduction)
     (askForMajor ?sid ?major)
     (individualSatisfyingConditions ?event-id IBTGeneration
      (TheSet (groundExpression ?major))))



(isa getMajor Predicate)
(arity getMajor 2)
(arg1Isa getMajor CycLTerm)
(arg2Isa getMajor Thing)

(<== (askForMajor ?sid ?major)
     (ist-Information (DrsCaseFn ?sid)
       (discourseCaseForDrs ?dcase ?sid))
     (ist-Information ?dcase (isaPossibleCaseForSentence ?sdrs-id ?sid))
     (getMajor ?sdrs-id ?major)
     )
(<== (getMajor ?sdrs-id ?major)
     (ist-Information (DrsCaseFn ?sdrs-id)
      (majorType ?major)))

(isa majorType Predicate)
(arity majorType 1)
(arg1Isa majorType Thing)

(<== (majorType ?major)
    (kbOnly 
        (useTransitiveInference
          (ist-Information UniversalVocabularyMt
            (isa ?major FieldOfStudy)))))
(<== (majorType ?major)
    (kbOnly 
        (useTransitiveInference
          (ist-Information UniversalVocabularyMt
            (isa ?major AcademicDepartment)))))