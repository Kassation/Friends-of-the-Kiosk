;;; (achieve :receiver interaction-manager :content (startUserProfiles)) to start
;;; (achieve :receiver interaction-manager :content (endUserProfiles)) to end
(in-microtheory Interaction-Manager-KioskMt)

(isa UserProfilesMt Microtheory)

(isa userProfilesActive Predicate)
(arity userProfilesActive 0)
(comment userProfilesActive 
  "(userProfilesActive) holds when the UserProfiles is being used to
   implement the Getting-to-know-people.")

;;;-----START-----;;;
(isa startUserProfiles ComplexActionPredicate)
(arity startUserProfiles 0)
(comment startUserProfiles
  "(startUserProfiles) tweaks the Interaction Manager to use semantic 
   interpretation methods that implement the Getting-to-know-people.")

(preconditionForMethod
 (and (newReifiedUtterance ?system-utterance)
      (currentUser ?user)
      (formattedContentString
        "Hello. What is your major, ~a?" (TheList ?user) ?utterance-string))
 (methodForAction
  (startUserProfiles)
  (actionSequence
   (TheList
    (doRecordMembers
     (TheSet
      (ist-Information Interaction-Manager-KioskMt
        (<== (preferInContext
              (answerQuestionViaEEs ?dcase)
              ?seq1 ?seq2)
             (containsPattern (checkUPUnderstanding ?dcase)
                              ?seq1)))
      ;;; make new Mt for user
      (isa (SocialModelMtFn ?user) Microtheory)
      (userProfilesActive)
      (genlMt Interaction-Manager-KioskMt UserProfilesMt)))
    (doAnnounce "Starting User Profiles...")
    (doSayUtterance ?system-utterance ?utterance-string)))))

;;;-----END-----;;;
(isa endUserProfiles ComplexActionPredicate)
(arity endUserProfiles 0)
(comment endUserProfiles
  "(endUserProfiles) tweaks the Interaction Manager to use semantic 
   interpretation methods that implement the Getting-to-know-people.")

(preconditionForMethod
 (and (newReifiedUtterance ?system-utterance)
      (currentUser ?user)
      (formattedContentString
        "See ya!" (TheList ?user) ?utterance-string))
 (methodForAction
  (endUserProfiles)
  (actionSequence
   (TheList
    (doForgetMembers
     (TheSet
      (ist-Information Interaction-Manager-KioskMt
        (<== (preferInContext
              (answerQuestionViaEEs ?dcase)
              ?seq1 ?seq2)
             (containsPattern (checkUPUnderstanding ?dcase)
                              ?seq1)))
      (userProfilesActive)
      (genlMt Interaction-Manager-KioskMt UserProfilesMt)))
    (doAnnounce "Shutting down User Profiles...")
    (doSayUtterance ?system-utterance ?utterance-string)))))


(isa checkUPUnderstanding ComplexActionPredicate)
(arity checkUPUnderstanding 1)
(arg1Isa checkUPUnderstanding Microtheory)
;;;(arg2Isa checkUPUnderstanding CycLTerm)
;;;(arg3Isa checkUPUnderstanding Microtheory)
(comment checkUPUnderstanding
  "(checkUPUnderstanding ?dcase) does the semantic analysis
   needed to recognize dialogue acts and domain semantics for FotK.")

;;; Dispatch to checkUPUnderstanding if the game is active.
(preconditionForMethod 
    (userProfilesActive)
 (methodForAction
  (answerQuestionViaEEs ?dcase)
  (actionSequence
   (TheList
    (doAnnounce "Using FotK methods.")
    (checkUPUnderstanding ?dcase)))))

(preconditionForMethod 
 (and (userProfilesActive)
      (outsourcedOnly (currentSentenceId ?sid))
      (ist-Information ?dcase
        (sentenceText ?sid ?user-utterance))
      (generateMostAppropriateQuery ?dcase ?response)
      (ist-Information ?dcase
        (sentenceInDiscourse ?sid ?s-index ?wordslist))
      (evaluate ?next-index (PlusFn 1 ?s-index))
      (currentUser ?user))
 (methodForAction 
  (checkUPUnderstanding ?dcase)
  (actionSequence
   (TheList 
    (doAnnounce "Running FotK narrative functions.")
    (doAnnounce "?dcase is ~a." (?dcase))
    (doEADiscourseInterpretation
     UserProfiles-NFMt ?s-index ?next-index)
    (doAgentPlan (getInfo ?sid ?dcase))
     ))))


(isa getInfo ComplexActionPredicate)
(arity getInfo 2)
;;;(arg1Isa getInfo Microtheory)

(preconditionForMethod
 (and (newReifiedUtterance ?system-utterance)
      (userProfilesActive)
      (outsourcedOnly (currentSentenceId ?sid))
      (currentUser ?user)
      (ist-Information ?dcase
        (introducesPreference ?sid ?preference))
      (isa ?preference FieldOfStudy)
      (formattedContentString
       "I see, so that's your major. Are you an Undergraduate or Graduate student, ~a? " (TheList ?user) ?utterance-string))
 (methodForAction 
  (getInfo ?sid ?dcase)
  (actionSequence
   (TheList 
    (doSayUtterance ?system-utterance ?utterance-string)
    (doAnnounce "said major, asking grade ERROR" (?sid))
    (doRecord 
      (ist-Information (SocialModelMtFn ?user) (studentMajor ?user ?preference)))
     ))))

(preconditionForMethod
 (and (newReifiedUtterance ?system-utterance)
      (userProfilesActive)
      (outsourcedOnly (currentSentenceId ?sid))
      (currentUser ?user)
      (ist-Information ?dcase
        (introducesPreference ?sid ?preference))
      (isa ?preference DefaultDisjointEdibleStuffType)
      (formattedContentString
       "I see, so that's what you like. Do you want some recommendations, ~a?" (TheList ?user) ?utterance-string))
 (methodForAction 
  (getInfo ?sid ?dcase)
  (actionSequence
   (TheList 
    (doSayUtterance ?system-utterance ?utterance-string)
    (doAnnounce "Received interests. Now, asking if user wants recommendations." (?sid))
    (doRecord 
      (ist-Information (SocialModelMtFn ?user) (FoodInterest ?user ?preference)))
    (doAgentPlan (giveRecs ?sid ?dcase))
     ))))

(preconditionForMethod
 (and (newReifiedUtterance ?system-utterance)
      (userProfilesActive)
      (outsourcedOnly (currentSentenceId ?sid))
      (currentUser ?user)
      (ist-Information ?dcase
        (askForGrade ?sid ?grade))
	  (isa ?grade StudentByEducationalOrganizationLevel)
      (formattedContentString
       "I see, so that's your grade. What food or drink do you like, ~a?" (TheList ?user) ?utterance-string))
 (methodForAction 
  (getInfo ?sid ?dcase)
  (actionSequence
   (TheList 
    (doSayUtterance ?system-utterance ?utterance-string)
    (doAnnounce "said grade, asking food" (?sid))
    (doRecordMembers
      (isa ?user ?grade))
    (doRecord 
      (ist-Information (SocialModelMtFn ?user) (isa ?user ?grade)))
    (doAgentPlan (giveRecs ?sid ?dcase))
     ))))

(isa giveRecs ComplexActionPredicate)
(arity giveRecs 2)

(preconditionForMethod
  (and (newReifiedUtterance ?system-utterance)
       (userProfilesActive)
       (outsourcedOnly (currentSentenceId ?sid))
       (currentUser ?user)
       (ist-Information ?dcase
        (yesOrNo ?sid ?response))
	     (equals ?response (NLResponseFn Affirmative-NLResponse))
       (ist-information CyclistsMt
        (isa ?other HumanCyclist))
       (ist-information KioskFriendsDataMt
        (predictUserInterest (CaseFn ?other) (CaseFn ?user) (TheSet) ?e))
       (formattedContentString
        "I recommend ~a." (TheList ?e) ?utterance-string)       
  )
  (methodForAction
    (giveRecs ?sid ?dcase)
    (actionSequence
      (TheList 
        (doSayUtterance ?system-utterance ?utterance-string)
        (doAnnounce "Recommendation given." (?sid))
     )))
)

(preconditionForMethod
  (and (newReifiedUtterance ?system-utterance)
       (userProfilesActive)
       (outsourcedOnly (currentSentenceId ?sid))
       (currentUser ?user)
       (ist-Information ?dcase
        (yesOrNo ?sid ?response))
	     (equals ?response (NLResponseFn Negative-NLResponse))
       (formattedContentString
        "Fine, no recommendations for you, ~a!" (TheList ?user) ?utterance-string)       
  )
  (methodForAction
    (giveRecs ?sid ?dcase)
    (actionSequence
      (TheList 
        (doSayUtterance ?system-utterance ?utterance-string)
        (doAnnounce "Recommendation given." (?sid))
     )))
)

;;;-----NF-----
(in-microtheory UserProfiles-NFMt)

(queryForInterpretation 0
                        (narrativeFunction (PresentationEventFn :REPLACE-SID ?event-id)
                                           ?preference
                                           UserIntroduction))

;;; OfferingACulturalProduct
(isa UserIntroduction Collection)
(genls UserIntroduction CommunicationAct-Single)
(comment UserIntroduction
  "UserIntroduction indicates that the sentence is a person introducing 
  themself to the Kiosk.")

(isa introducesPreference Predicate)
(arity introducesPreference 2)
(arg1Isa introducesPreference IBTGeneration)
(arg2Isa introducesPreference Thing)
(comment introducesPreference
  "(introducesPreference ?pef ?po) indicates that there is an introduction
 event ?pef which constitutes stating a preference ?po.")

;;; NF 

(<== (narrativeFunction (PresentationEventFn ?sid ?event-id)
                        ?preference UserIntroduction)
     (introducesPreference ?sid ?preference)
     ;; Introduce constant for the event ID
     (individualSatisfyingConditions 
      ?event-id IBTGeneration
      (TheSet (groundExpression ?preference))))

(<== (introducesPreference ?sid
                           ?preference)
     (ist-Information (DrsCaseFn ?sid)
       (discourseCaseForDrs ?dcase ?sid))
     (ist-Information ?dcase (isaPossibleCaseForSentence ?sdrs-id ?sid))
     (getPreference ?sdrs-id ?preference)
     )


(isa getPreference Predicate)
(arity getPreference 2)
(arg1Isa getPreference CycLTerm)
(arg2Isa getPreference FieldOfStudy)


(<== (getPreference ?sdrs-id ?preference)
     (ist-Information (DrsCaseFn ?sdrs-id)
      (isa ?thing ?preference))
      (kbOnly 
        (useTransitiveInference
          (ist-Information UniversalVocabularyMt
            (isa ?preference FieldOfStudy))))
)

(<== (getPreference ?sdrs-id ?preference)
     (ist-Information (DrsCaseFn ?sdrs-id)
      (isa ?thing ?preference))
      (kbOnly 
        (useTransitiveInference
          (ist-Information UniversalVocabularyMt
            (isa ?preference DefaultDisjointEdibleStuffType))))
)

(isa askForGrade Predicate)
(arity askForGrade 2)
(arg1Isa askForGrade IBTGeneration)
(arg2Isa askForGrade Thing)

(<== (narrativeFunction (PresentationEventFn ?sid ?event-id)
                        ?grade UserIntroduction)
     (askForGrade ?sid ?grade)
     (individualSatisfyingConditions ?event-id IBTGeneration
      (TheSet (groundExpression ?grade))))

(isa getGrade Predicate)
(arity getGrade 2)
(arg1Isa getGrade CycLTerm)
(arg2Isa getGrade Thing)

(<== (askForGrade ?sid ?grade)
     (ist-Information (DrsCaseFn ?sid)
       (discourseCaseForDrs ?dcase ?sid))
     (ist-Information ?dcase (isaPossibleCaseForSentence ?sdrs-id ?sid))
     (getGrade ?sdrs-id ?grade)
     )

(<== (getGrade ?sdrs-id ?grade)
     (ist-Information (DrsCaseFn ?sdrs-id)
      (isa ?thing ?grade))
      (kbOnly 
        (useTransitiveInference
          (ist-Information UniversalVocabularyMt
            (isa ?grade StudentByEducationalOrganizationLevel)))))


(<== (narrativeFunction (PresentationEventFn ?sid ?event-id)
                        ?grade UserIntroduction)
     (yesOrNo ?sid ?response)
     (individualSatisfyingConditions ?event-id IBTGeneration
      (TheSet (groundExpression ?grade))))

(isa getResponse Predicate)
(arity getResponse 2)
(arg1Isa getResponse CycLTerm)
(arg2Isa getResponse Thing)

(<== (yesOrNo ?sid ?response)
     (ist-Information (DrsCaseFn ?sid)
       (discourseCaseForDrs ?dcase ?sid))
     (ist-Information ?dcase (isaPossibleCaseForSentence ?sdrs-id ?sid))
     (getResponse ?sdrs-id ?response)
     )

(<== (getResponse ?sdrs-id ?response)
     (ist-Information (DrsCaseFn ?sdrs-id)
      (isa ?thing ?response))
      (kbOnly 
        (useTransitiveInference
          (ist-Information UniversalVocabularyMt
            (isa ?response (NLResponseFn Affirmative-NLResponse))))))

(<== (getResponse ?sdrs-id ?response)
     (ist-Information (DrsCaseFn ?sdrs-id)
      (isa ?thing ?response))
      (kbOnly 
        (useTransitiveInference
          (ist-Information UniversalVocabularyMt
            (isa ?response (NLResponseFn Negative-NLResponse))))))
